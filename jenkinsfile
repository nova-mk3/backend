pipeline {
    agent any
    environment {
        ENV_FILE = '.env'
    }
    stages {
        stage('Set Environment Variables') {
            steps {
                script {
                    echo "Debug: Current BRANCH_NAME = '${env.BRANCH_NAME}'"

                    def envVars = ""
                    if (env.BRANCH_NAME == 'main') {
                        echo "Setting environment for main (production) branch..."
                        withCredentials([
                            string(credentialsId: 'MYSQL_DATABASE_PROD', variable: 'MYSQL_DATABASE_PROD'),
                            string(credentialsId: 'MYSQL_USER_PROD', variable: 'MYSQL_USER_PROD'),
                            string(credentialsId: 'MYSQL_PASSWORD_PROD', variable: 'MYSQL_PASSWORD_PROD'),
                            string(credentialsId: 'MYSQL_ROOT_PASSWORD_PROD', variable: 'MYSQL_ROOT_PASSWORD_PROD'),
                            string(credentialsId: 'MYSQL_HOST_PROD', variable: 'MYSQL_HOST_PROD'),
                            string(credentialsId: 'MYSQL_IN_PORT_PROD', variable: 'MYSQL_IN_PORT_PROD'),
                            string(credentialsId: 'MYSQL_EX_PORT_PROD', variable: 'MYSQL_EX_PORT_PROD'),
                            string(credentialsId: 'SPRING_PROFILE_ACTIVE_PROD', variable: 'SPRING_PROFILE_ACTIVE_PROD'),
                            string(credentialsId: 'SPRING_APP_PORT_PROD', variable: 'SPRING_APP_PORT_PROD')
                        ]) {
                            envVars = """
                                MYSQL_DATABASE=${MYSQL_DATABASE_PROD}
                                MYSQL_USER=${MYSQL_USER_PROD}
                                MYSQL_PASSWORD=${MYSQL_PASSWORD_PROD}
                                MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD_PROD}
                                MYSQL_HOST=${MYSQL_HOST_PROD}
                                MYSQL_IN_PORT=${MYSQL_IN_PORT_PROD}
                                MYSQL_EX_PORT=${MYSQL_EX_PORT_PROD}
                                SPRING_PROFILE_ACTIVE=${SPRING_PROFILE_ACTIVE_PROD}
                                SPRING_APP_PORT=${SPRING_APP_PORT_PROD}
                            """
                            writeFile file: ENV_FILE, text: envVars
                            echo ".env file created successfully (Production)"
                        }
                    }
                }
            }
        }

        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Grant Permissions') {
            steps {
                sh 'chmod +x ./gradlew'
            }
        }

        stage('Build JAR') {
            steps {
                sh "./gradlew clean build"
            }
        }

        stage('Run Tests') {
            when {
                branch 'dev'
            }
            steps {
                script {
                    echo "Running tests on dev branch..."
                    sh "./gradlew test"
                }
            }
        }

        stage('Build Docker Image') {
            when {
                branch 'main'
            }
            steps {
                script {
                    def imageTag = "latest"
                    docker.build("myapp:${imageTag}")
                }
            }
        }


        stage('Deploy to Production (Only for main branch)') {
            when {
                branch 'main'
            }
            steps {
                script {
                    echo "Stopping old container..."
                    sh '''
                    docker stop myapp || true
                    docker rm myapp || true
                    '''

                    echo "Running new container..."
                    sh '''
                    docker compose --env-file .env down || true
                    docker compose --env-file .env build --no-cache
                    docker compose up -d --no-deps spring-app
                    '''
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    def isPruneRunning = sh(script: "ps aux | grep 'docker image prune' | grep -v grep || true", returnStdout: true).trim()

                    if (isPruneRunning) {
                        echo "Docker prune is already running. Skipping this step."
                    } else {
                        sh "docker image prune -f"
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up resources"
        }
        success {
            echo "Pipeline completed successfully."
        }
        failure {
            echo "Pipeline failed. Check the logs."
            error("Pipeline failed! Fix the issue before merging to main.")
        }
    }
}
pipeline {
    agent any

    environment {
        ENV_FILE = '.env'
    }

    stages {

        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Set Environment Variables') {
            steps {
                script {
                    echo "Debug: Current BRANCH_NAME = '${env.BRANCH_NAME}'"

                    sh '''
                        if [ -d .env ]; then
                            echo ".env is a directory. Removing it..."
                            rm -rf .env
                        fi
                        if [ -f .env ]; then
                            echo ".env is a file. Removing it..."
                            rm -f .env
                        fi
                    '''

                    def envVars = ""
                    if (env.BRANCH_NAME == 'main') {
                        echo "Setting environment for main (production) branch..."
                        withCredentials([
                            string(credentialsId: 'MYSQL_DATABASE_PROD', variable: 'MYSQL_DATABASE_PROD'),
                            string(credentialsId: 'MYSQL_USER_PROD', variable: 'MYSQL_USER_PROD'),
                            string(credentialsId: 'MYSQL_PASSWORD_PROD', variable: 'MYSQL_PASSWORD_PROD'),
                            string(credentialsId: 'MYSQL_ROOT_PASSWORD_PROD', variable: 'MYSQL_ROOT_PASSWORD_PROD'),
                            string(credentialsId: 'MYSQL_HOST_PROD', variable: 'MYSQL_HOST_PROD'),
                            string(credentialsId: 'MYSQL_IN_PORT_PROD', variable: 'MYSQL_IN_PORT_PROD'),
                            string(credentialsId: 'MYSQL_EX_PORT_PROD', variable: 'MYSQL_EX_PORT_PROD'),
                            string(credentialsId: 'REDIS_HOST_PROD', variable: 'REDIS_HOST_PROD'),
                            string(credentialsId: 'REDIS_PORT_PROD', variable: 'REDIS_PORT_PROD'),
                            string(credentialsId: 'SPRING_PROFILE_ACTIVE_PROD', variable: 'SPRING_PROFILE_ACTIVE_PROD'),
                            string(credentialsId: 'SPRING_APP_PORT_PROD', variable: 'SPRING_APP_PORT_PROD'),
                            string(credentialsId: 'FILE_STORAGE_PATH_PROD', variable: 'FILE_STORAGE_PATH'),
                            string(credentialsId: 'JWT_SECRET_KEY_PROD', variable: 'JWT_SECRET_KEY'),
                            string(credentialsId: 'EMAIL_ADDRESS_PROD', variable: 'EMAIL_ADDRESS'),
                            string(credentialsId: 'EMAIL_PASSWORD_PROD', variable: 'EMAIL_PASSWORD'),
                            string(credentialsId: 'BASE_PROFILE_IMAGE_NAME_PROD', variable: 'BASE_PROFILE_IMAGE_NAME'),
                            string(credentialsId: 'ADMIN_STUDENT_NUMBER_PROD', variable: 'ADMIN_STUDENT_NUMBER'),
                            string(credentialsId: 'ADMIN_PASSWORD_PROD', variable: 'ADMIN_PASSWORD')
                        ]) {
                            envVars = """
                            MYSQL_DATABASE=${MYSQL_DATABASE_PROD}
                            MYSQL_USER=${MYSQL_USER_PROD}
                            MYSQL_PASSWORD=${MYSQL_PASSWORD_PROD}
                            MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD_PROD}
                            MYSQL_HOST=${MYSQL_HOST_PROD}
                            MYSQL_IN_PORT=${MYSQL_IN_PORT_PROD}
                            MYSQL_EX_PORT=${MYSQL_EX_PORT_PROD}
                            REDIS_HOST=${REDIS_HOST_PROD}
                            REDIS_PORT=${REDIS_PORT_PROD}
                            SPRING_PROFILE_ACTIVE=${SPRING_PROFILE_ACTIVE_PROD}
                            SPRING_APP_PORT=${SPRING_APP_PORT_PROD}
                            FILE_STORAGE_PATH=${FILE_STORAGE_PATH}
                            JWT_SECRET_KEY=${JWT_SECRET_KEY}
                            EMAIL_ADDRESS=${EMAIL_ADDRESS}
                            EMAIL_PASSWORD=${EMAIL_PASSWORD}
                            BASE_PROFILE_IMAGE_NAME=${BASE_PROFILE_IMAGE_NAME}
                            ADMIN_STUDENT_NUMBER=${ADMIN_STUDENT_NUMBER}
                            ADMIN_PASSWORD=${ADMIN_PASSWORD}
                            """
                        }
                    } else {
                        echo "Setting environment for non-main branch (dev/test)..."
                        envVars = """
                        MYSQL_DATABASE=test_db
                        MYSQL_USER=test_user
                        MYSQL_PASSWORD=test_pw
                        MYSQL_ROOT_PASSWORD=test_root_pw
                        MYSQL_HOST=localhost
                        MYSQL_IN_PORT=3306
                        MYSQL_EX_PORT=3307
                        REDIS_HOST=localhost
                        REDIS_PORT=6379
                        SPRING_PROFILE_ACTIVE=dev
                        SPRING_APP_PORT=4001
                        FILE_STORAGE_PATH=/tmp/test-storage
                        JWT_SECRET_KEY=dummysecret
                        EMAIL_ADDRESS=test@example.com
                        EMAIL_PASSWORD=1234
                        BASE_PROFILE_IMAGE_NAME=default.png
                        ADMIN_STUDENT_NUMBER=12345678
                        ADMIN_PASSWORD=1234
                        """
                    }

                    writeFile file: '.env', text: envVars
                }
            }
        }

        stage('Grant Permissions') {
            steps {
                sh 'chmod +x ./gradlew'
            }
        }

        stage('Build JAR') {
            steps {
                sh "./gradlew clean build --no-daemon"
            }
        }

        stage('Prepare Docker Context') {
            when {
                branch 'main'
            }
            steps {
                sh 'cp .env build/libs/.env'
            }
        }

        stage('Run Tests') {
            steps {
                echo "Running tests on dev branch..."
                sh "./gradlew test"
            }
        }

        stage('Build Docker Image') {
            when {
                branch 'main'
            }
            steps {
                script {
                    def imageTag = "latest"
                    docker.build("myapp:${imageTag}")
                }
            }
        }

        stage('Deploy to Production (Only for main branch)') {
            when {
                branch 'main'
            }
            steps {
                script {
                    echo "Stopping old container if running..."
                    sh '''
                    docker ps -q --filter "name=backend-spring-app-1" | grep -q . && docker stop backend-spring-app-1 && docker rm backend-spring-app-1 || true
                    '''

                    echo "Running new container on correct network with consistent project name..."
                    sh '''
                    docker compose -p backend --env-file .env build spring-app
                    docker compose -p backend --env-file .env up -d --no-deps spring-app
                    '''
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    def isPruneRunning = sh(script: "ps aux | grep 'docker image prune' | grep -v grep || true", returnStdout: true).trim()
                    if (isPruneRunning) {
                        echo "Docker prune is already running. Skipping this step."
                    } else {
                        sh "docker image prune -f"
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up resources"
        }
        success {
            echo "Pipeline completed successfully."
        }
        failure {
            echo "Pipeline failed. Check the logs."
            error("Pipeline failed! Fix the issue before merging to main.")
        }
    }
}